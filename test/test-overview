#!/usr/bin/perl
# test-overview: generate a Markdown overview of results of a blackbox test data file

use Modern::Perl qw(2018);
use utf8;
use Carp qw(croak);
use Readonly;
use FindBin;
use File::Basename;
use IPC::Run qw(run);

# constants
Readonly::Array my @methods => qw(Core STV Schulze RankedPairs);
Readonly::Scalar my $pvroot => dirname($FindBin::RealBin);
Readonly::Scalar my $count_script => "$pvroot/src/perl/prefvote/bin/vote-count";
Readonly::Scalar my $acr_compare_script => "$pvroot/test/acr-compare";
Readonly::Array my @yaml_suffixes => qw(.yaml .yml);
Readonly::Scalar my $markdown_suffix => ".md";

# process test data file into a Markdown overview
sub process_test_file
{
    my $yaml_file = shift;

    # open Markdown overview file for output
    my($filename, $dirs, $suffix) = fileparse($yaml_file, @yaml_suffixes);
    #say "filename=$filename dirs=$dirs suffix=$suffix";
    my $outfile = $dirs.$filename.$markdown_suffix;
    if (-f $outfile) {
        croak "$0: file exists: $outfile";
    }
    open (my $out_fh, ">", $outfile)
        or croak "$0: failed to open $outfile for writing: $!";

    # generate title
    say $out_fh "# Black-box test data overview for [$filename$suffix]($filename$suffix)";
    say $out_fh "";
    
    # summary table
    my $summary_text;
    my @s_cmd = ($acr_compare_script, "--html", $yaml_file);
    run \@s_cmd, \undef, \$summary_text;
    say $out_fh "<blockquote>";
    say $out_fh $summary_text;
    say $out_fh "</blockquote>";
    say $out_fh "";

    # results for each voting method
    foreach my $method (@methods) {
        my $results_text;
        my @r_cmd = ($count_script, "--format=html", "--method=$method", $yaml_file);
        say $out_fh "## Results for $method method";
        say $out_fh "<blockquote>";
        run \@r_cmd, \undef, \$results_text;
        say $out_fh $results_text;
        say $out_fh "</blockquote>";
        say $out_fh "";
    }

    close $out_fh;
}

# main
if (scalar @ARGV == 0) {
    say "usage: $0 file [...]";
    exit 0;
}
my @yaml_files = @ARGV;
foreach my $yaml_file (@yaml_files) {
    process_test_file($yaml_file);
}
