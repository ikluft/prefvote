#!/usr/bin/perl
# PODNAME: run-tests
# test script launcher for PrefVote preference voting system

use Modern::Perl qw(2015); # require 5.20.0 or later
use autodie;
use Carp qw(croak);
use Cwd;
use Readonly;
use Getopt::Long;
use Term::ANSIColor;
use IO::Interactive qw(is_interactive);
use TAP::Parser qw/all/;
use TAP::Parser::Aggregator qw/all/;

# configuration settings per language implementation
Readonly::Array my @supported_languages => (qw(perl));
Readonly::Hash my %config => (
    blackbox => {
       data => "test/inputs", 
    },
    "perl" => {
        build => 'dzil build',
        whitebox => {
            dirs => [qw(src/perl/prefvote src/perl/stv)],
            #dirs => [qw(src/perl/prefvote src/perl/stv src/perl/schulze)],
            testdir => "t",
            test_re => qr{\.t$},
            tp_args => [switches => ['-I../prefvote/lib', '-Ilib']],
        },
        prove_params => "--lib",
        blackbox => 'src/perl/bin/vote-count',
    },
);
Readonly::Hash my %callbacks => (
    test => sub {
        my $test = shift;
        if ( $test->is_ok && not $test->directive ) {
            # normal passing test
            print color 'green';
        }
        elsif ( !$test->is_ok ) {    # even if it's TODO
            print color 'red';
        }
        elsif ( $test->has_skip ) {
            print color 'white on_blue';

        }
        elsif ( $test->has_todo ) {
            print color 'white';
        }
    },
    ELSE => sub {
        # plan, comment, and so on (anything which isn't a test line)
        print color 'bright_blue';
    },
    ALL => sub {
        # now print them
        print shift->as_string;
        print color 'reset';
        print "\n";
    },
);

# run whitebox (unit) tests
sub run_whitebox_tests
{
    my %opts = @_;
    my $lang = $opts{lang};
    my $agg = $opts{agg};
    my $orig_cwd = getcwd();
    foreach my $dir (@{$config{$lang}{whitebox}{dirs}}) {
        ( -d "$dir" )
            or croak "configure whitebox testing directory $dir is not a directory";
        my $testdir = $config{$lang}{whitebox}{testdir};
        my $test_re = $config{$lang}{whitebox}{test_re};
        if ( -d "$dir/$testdir" ) {
            # enter whitebox test directory and find test scripts
            chdir $dir;
            opendir(my $dh, "$testdir")
                or croak "Can't open $dir/$testdir: $!";
            my @files = sort grep {$_ =~ $test_re} readdir($dh);
            say STDERR "debug ($dir/$testdir -> $test_re): ".join(" ", @files);
            closedir $dh;

            # run tests
            foreach my $file (@files) {
                (-f "$testdir/$file") or next;
                say "running tests: $dir/$testdir/$file";
                my $parser = TAP::Parser->new({
                    source => "$testdir/$file",
                    @{$config{$lang}{whitebox}{tp_args}},
                    (is_interactive() ? (callbacks => \%callbacks) : ()),
                });
                while ( my $result = $parser->next ) {
                    if (not is_interactive()) {
                        say $result->as_string;
                    }
                }
                printf "Planned: %s\nPassed: %s\nFailed: %s\n\n",
                    $parser->tests_planned, scalar $parser->passed, scalar $parser->failed;
                    $agg->add("$testdir/$file", $parser);
            }
            chdir $orig_cwd;
        } else {
            croak("test (t) directory not found in configured directory $dir");
        }
    }
    return;
}

# run blackbox tests (applicable across languages, can't use knowledge of implementation)
sub run_blackbox_tests
{
    my %opts = @_;
    my $lang = $opts{lang};
    my $agg = $opts{agg};
    my $orig_cwd = getcwd();
    foreach my $dir (@{$config{$lang}{blackbox}{dirs}}) {
    }
}

# process command-line
my (@language, $whitebox, $blackbox, $all);
GetOptions("language:s" => \@language, "whitebox|white|w" => \$whitebox, "blackbox|black|b" => \$blackbox,
    "all" => \$all);

#
# run tests as selected
#

# aggregator collects results from all tests
my $aggregate = TAP::Parser::Aggregator->new(
);

# process --all
if ($all) {
    $whitebox = 1;
    $blackbox = 1;
    @language = @supported_languages;
}

# whitebox and blackbox tests within each language implementation's sources
{
    local $ENV{PREFVOTE_ROOT} = getcwd(); # unit tests must look for this and run relative to the project root
    foreach my $lang (@language) {
        if ($whitebox) {
            run_whitebox_tests(lang => $lang, agg => $aggregate);
        }
        if ($blackbox) {
            run_blackbox_tests(lang => $lang, agg => $aggregate);
        }
    }
}

# print results
printf "Total: %s\nPlanned: %s\nPassed: %s\nFailed: %s\n",
$aggregate->total, scalar $aggregate->planned, scalar $aggregate->passed, scalar $aggregate->failed;
