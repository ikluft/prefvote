/*
 * Condorcet Election Format (CEF) grammar
 * CEF_Parser.yp is the CEF grammar used as input for Parse::Yapp to generate CEF_Parser.pm
 * Copyright (c) 2023 by Ian Kluft
 * Open Source license: Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0
 */

%{
    use Readonly;
    Readonly::Array my @CEF_TOKENS => (
        [ EMPTY_RANKING => qr(/EMPTY_RANKING/)x, ],
        [ TAGDELIM      => qr([|][|])x, ],
        [ ','           => qr([,])x, ],
        [ '^'           => qr([\^])x, ],
        [ '*'           => qr([*])x, ],
        [ '='           => qr([=])x, ],
        [ '>'           => qr([>])x, ],
        [ INT           => qr(\d+)x, ],
        [ WORD          => qr([\w!$%&+.:;@-]+)x, ],
    );
%}

/* token declarations */
%token WORD      /* word characters including embedded whitespace */
%token INT       /* integer */
%token TAGDELIM  /* || delimits tags from ranking */
%token ','       /* comma delimits multiple tags */
%token '*'       /* quantifier op */
%token '^'       /* weight op */
%token '>'       /* preference op */
%token '='       /* equality op */
%token EMPTY_RANKING  /* empty ballot ranking denoted by string /EMPTY_RANKING/ */

# start token
%start line

/* grammar */
%%

line:
    tags TAGDELIM ranking       {
                                    my %attr;
                                    if ( ref $_[3][0] eq 'HASH' ) {
                                        # include multiplier hash contents if it exists
                                        my $subattr = shift @{$_[3]};
                                        %attr = %$subattr;
                                    }
                                    $attr{tags} = [ sort @{$_[1]} ];
                                    return [ \%attr, @{$_[3]} ];
                                }
|   ranking                     { return $_[1]; }
;

tags:
    tags ',' tag                { return [ @{$_[1]}, $_[3] ]; }
|   tag                         { return [ $_[1] ]; }
;

tag:
    words                       { return $_[1]; }
;

ranking:
    choice_list multipliers     { return [ (defined $_[2]) ? ($_[2]) : (), @{$_[1]} ]; }
|   EMPTY_RANKING multipliers   { return [ (defined $_[2]) ? ($_[2]) : () ]; }
;

choice_list:
    choice_list '>' equal_list  { return [ @{$_[1]}, $_[3] ]; }
|   equal_list                  { return [ $_[1] ]; }
;

equal_list:
    equal_list '=' candidate    { return [ @{$_[1]}, $_[3] ]; }
|   candidate                   { return [ $_[1] ]; }
;

candidate:
    words                       { return $_[1]; }
;

multipliers:
    /* empty */
|   quantifier weight           { return { %{$_[1]}, %{$_[2]} }; }
|   weight quantifier           { return { %{$_[1]}, %{$_[2]} }; }
|   quantifier                  { return $_[1]; }
|   weight                      { return $_[1]; }
;

quantifier:
    '*' INT                     { return { quantifier => $_[2]}; }
;

weight:
    '^' INT                     {
                                    if ( not ( $_[0]->YYData->{VOTEDEF}{weight_allowed} // 0 )) {
                                        $_[0]->YYError;
                                    }
                                    return { weight => $_[2]};
                                }
;

words:
    words word                  { return $_[1] . " " . $_[2]; }
|   word                        { return "" . $_[1]; }
;

word:
    WORD                        { return "" . $_[1]; }
|   INT                         { return 0 + $_[1]; }
;

%%

sub _Error
{
    my ( $parser ) = @_;
    my $expect_str = ( scalar $parser->YYExpect > 0 ) ? ( join( ' ', sort $parser->YYExpect )) : "";
    my $errmsg = ( exists $parser->YYData->{ERRMSG} )
        ?  $parser->YYData->{ERRMSG}
        : "Syntax error at position " . $parser->{USER}{CHARNO}
            . (( defined $parser->YYCurtok and length $parser->YYCurtok > 0 )
                ? ", found " . $parser->YYCurtok . " '" . $parser->YYCurval . "'" : "" )
            . (( length $expect_str > 0 ) ? ", expected $expect_str" : "" );
    croak $errmsg;
}

sub _Lexer
{
    my ($parser) = shift;

    # check if any input is available, otherwise signal end of input
    $parser->YYData->{INPUT}
        or return ( '', undef );

    # remove leading whitespace before next token
    if( $parser->YYData->{INPUT} =~ s/^ ( \s+ )//x ) {
        $parser->{USER}{CHARNO} += length $1;
    }

    # check for end of input after whitespace
    if ( length $parser->YYData->{INPUT} == 0 ) {
        return ( '', undef );
    }

    # find first token from matching list
    foreach my $token_pair ( @CEF_TOKENS ) {
        my ( $token_name, $token_regex ) = @$token_pair;
        if ( $parser->YYData->{INPUT} =~ s/ ^ ( $token_regex ) //x ) {
            my $match = $1;

            # a comment ends processing of the line
            if ($parser->YYData->{INPUT} =~ /^#/ ) {
                return ( '', undef );
            }

            # check special case where a WORD begins with numerics, should return WORD instead of INT
            if ( $token_name eq "INT" and ($parser->YYData->{INPUT} =~ /^\w/ )) {
                $parser->YYData->{INPUT} =~ s/ ^ ( \w+ ) //x;
                my $match2 = $1;
                $token_name = "WORD";
                $match .= $match2;
            }

            # return token name and match string
            $parser->{USER}{CHARNO} += length $match;
            return ( $token_name, $match );
        }
    }

    # no recognized token found
    $parser->YYError;
}

sub parse
{
    my ($self, $input_str, $vote_def) = @_;
    $self->YYData->{INPUT} = $input_str;
    $self->YYData->{VOTEDEF} = $vote_def;
    $self->{USER}{CHARNO}  = 0;
    my $result = $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error );
    return $result;
}
