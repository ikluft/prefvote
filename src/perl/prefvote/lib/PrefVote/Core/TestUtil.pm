# PrefVote::Core::TestUtil
# ABSTRACT: testing utilities to contain Test::More runtime dependency away from non-test modules
# Copyright (c) 1998-2022 by Ian Kluft
# Open Source license: Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0
 
# pragmas to silence some warnings from Perl::Critic
## no critic (Modules::RequireExplicitPackage)
# 'use strict' and 'use warnings' included here
# This solves a catch-22 where parts of Perl::Critic want both package and use-strict to be first
use Modern::Perl qw(2013); # require 5.16.0 or later
## use critic (Modules::RequireExplicitPackage)

package PrefVote::Core::TestUtil;

use autodie;
use Data::Dumper;
use Test::More;
use base "PrefVote";

# run a single test
sub do_test
{
    my $test = shift;

    # process test case parameters as hash
    if ($test->{type} eq "is") {
        Test::More::is($test->{value}, $test->{expected}, $test->{description});
        return;
    }
    if ($test->{type} eq "cmp_ok") {
        Test::More::cmp_ok($test->{value}, $test->{op}, $test->{expected}, $test->{description});
        return;
    }
    if ($test->{type} eq "ok") {
        Test::More::ok($test->{value}, $test->{description});
        return;
    }
    if ($test->{type} eq "pass") {
        Test::More::pass($test->{description});
        return;
    }
    if ($test->{type} eq "fail") {
        Test::More::fail($test->{description});
        return;
    }
    Test::More::fail("unrecognized test type ".(defined $test->{type} ? "'".$test->{type}."'" : "(undef)")
        ." in test: ".$test->{description});
    return;
}

# run list of tests from data generated by PrefVote::Core::TestSpec::check()
sub do_tests
{
    my @tests = @_;

    __PACKAGE__->debug_print("tests ".Dumper(\@tests));
    Test::More::plan(tests => scalar @tests);
    foreach my $test (@tests) {
        do_test($test);
    }
    return;
}

1;

__END__

# POD documentation
=encoding utf8

=head1 SYNOPSIS

    require PrefVote::Core::TestUtil;
    $vote_obj->debug_print("checking tests: ".(ref $vote_obj));
    my @tests = $vote_obj->blackbox_check();
    PrefVote::Core::TestUtil::do_tests(@tests);

=head1 DESCRIPTION

PrefVote::Core::TestUtil is used for black-box testing of PrefVote.
It provides a function do_tests() which accepts the array of tests returned from
blackbox_check() from any voting method subclass of PrefVote::Core. It is meant to keep the dependency on
the L<Test::More> module separate from other run-time modules that shouldn't otherwise be muddied by a
dependence on a test module.

=head1 FUNCTIONS

=over 1

=item do_tests ( @tests )

The list of tests provided to this function are counted to provide a plan to Test::More, and then run one-by-one
by passing them to do_test().

=item do_test ( \%test )

The I<test> parameter is a hash reference describing a test to perform.
This data will be fed to functions of L<Test::More> to report results in the TAP (Test Anything Protocol) format.
The hash contains at least I<type> and I<description> parameters, and then in some cases others depending on the type.

=over 1

=item type

The type determines which function from L<Test::More> will be called in this test.
It must be one of the following strings: is, cmp_ok, ok, pass, fail.
For the I<is> type, I<description>, I<value> and I<expected> must be provided in the test hashref.
For the I<cmp_ok> type, I<description>, I<op>, I<value> and I<expected> must be provided.
For the I<ok> type, I<description>, I<value> must be provided.
For I<pass> and I<fail>, only I<description> is needed.

=item description

This is a descriptive name for the test to be performed. It should be unique from other tests.

=item value

Required for I<is>, I<cmp_ok> and I<ok> tests, this indicates the value received for the test.

=item expected

Required for I<is> and I<cmp_ok> tests, this indicates an expected value to compare to the I<value> for the test.

=item op

Required for I<cmp_ok>, this string indicates a Perl binary operator to perform between
the expected value and the value.
The expession must result in a boolean value indicated pass (nonzero) or fail (zero).

=back

=back

=head1 SEE ALSO

L<PrefVote::Core>

L<https://github.com/ikluft/prefvote>

=head1 BUGS AND LIMITATIONS

Please report bugs via GitHub at L<https://github.com/ikluft/prefvote/issues>

Patches and enhancements may be submitted via a pull request at L<https://github.com/ikluft/prefvote/pulls>

=cut

