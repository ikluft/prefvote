#!/usr/bin/perl
# PODNAME: vote-count
# command line interface to run PrefVote::STV processing YAML input for testing and simple usage example
# derived from Vote::STV by Ian Kluft
# Copyright (c) 1998-2021 by Ian Kluft
# Open Source license: Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0

use Modern::Perl qw(2015); # require 5.20.0 or later
use autodie;
use Carp qw(croak confess);;
use YAML::XS; # RPM: perl-YAML-LibYAML, DEB: libyaml-libyaml-perl
use PrefVote::Core;
use Getopt::Long;
use Scalar::Util 'reftype';
use Data::Dumper;

# print results list (winners or eliminated) with potential ties
sub print_result_list
{
    my $result_list = shift;
    if (scalar @$result_list) {
        foreach (my $i=0; $i < scalar @$result_list; $i++) {
            my $place = $i+1;
            if (scalar @{$result_list->[$i]} > 1) {
                say "$place  tie: ".join(" ", sort @{$result_list->[$i]});
            } else {
                say "$place: ".$result_list->[$i][0];
            }
        }
    } else {
        say "none";
    }
    return;
}

# get class suffix string
sub suffix
{
    my $class = shift;
    my $class_suffix = $class;
    $class_suffix =~ s/^.*:://x; # remove everything except the last part of the class name
    return $class_suffix;
}

# command-line processing
my ($debug, $test_mode, $yaml_format);
GetOptions("debug" => \$debug, "test" => \$test_mode, "yaml" => \$yaml_format);
if (not @ARGV) {
    say STDERR "usage: $0 [--debug] [--test] yaml_file";
    exit 0;
}

# count votes
my $vote_obj = PrefVote::Core::yaml2vote($ARGV[0]);
if ($debug) {
    # set debugging in PrefVote hierarchy
    $vote_obj->debug(1);

    # turn on stack traces for unexpected errors
    ## no critic (Variables::RequireLocalizedPunctuationVars)
    $SIG{ __DIE__ } = sub {confess(@_)};
}
$vote_obj->count();
if ($vote_obj->debug()) {
    local $Data::Dumper::Sortkeys = 1;
    say STDERR "returned vote object is a ".ref($vote_obj);
    say STDERR Dumper($vote_obj);
}

# check for test, YAML or default modes
if ($test_mode) {
    # test mode - run black-box tests
    my $extra = $vote_obj->extra();
    my @tests;

    # collect tests from PrefVote subclass
    $vote_obj->debug_print("extra: ".Dumper($extra));
    foreach my $group (@$extra) {
        if (exists $group->{results}) {
            # 1st layer within the results test is classes to test against
            # use only tests for the current voting-method class
            my $class_suffix = suffix(ref $vote_obj);
            foreach my $test_class (keys %{$group->{results}}) {
                my $subclass_name = "PrefVote::$test_class";
                $vote_obj->debug_print("checking $test_class tests: ".(ref $vote_obj)." vs $subclass_name");
                if (ref $vote_obj eq $subclass_name) {
                    push @tests, $vote_obj->blackbox_check($group->{results}{$test_class});
                }
            }
        }
    }

    # feed the tests gathered from the subclass to Test::More
    $vote_obj->debug_print("tests ".Dumper(\@tests));
    require Test::More;
    Test::More::plan(tests => scalar @tests);
    foreach my $test (@tests) {
        # process test case parameters as hashes
        ## no critic (ControlStructures::ProhibitCascadingIfElse ControlStructures::ProhibitDeepNests)

        if ($test->{type} eq "is") {
            Test::More::is($test->{value}, $test->{expected}, $test->{description});
        } elsif ($test->{type} eq "ok") {
            Test::More::ok($test->{value}, $test->{description});
        } elsif ($test->{type} eq "pass") {
            Test::More::pass($test->{description});
        } elsif ($test->{type} eq "fail") {
            Test::More::fail($test->{description});
        }
    }
} elsif ($yaml_format) {
    # output YAML results
    print YAML::XS::Dump($vote_obj->result_yaml());
} else {
    # print result
    my $results = $vote_obj->results();
    say "Winning order";
    print_result_list($results->{winners});
    say "Elimination order";
    print_result_list($results->{eliminated});
}

__END__

# POD documentation

=head1 NAME

vote-count

=head1 USAGE

vote-count vote-data.yaml

=head1 OPTIONS

=head1 EXIT STATUS

=head1 SEE ALSO

=head1 BUGS AND LIMITATIONS

Please report bugs via GitHub at L<https://github.com/ikluft/prefvote/issues>

Patches and enhancements may be submitted via a pull request at L<https://github.com/ikluft/prefvote/pulls>

=cut
