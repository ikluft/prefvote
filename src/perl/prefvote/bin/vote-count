#!/usr/bin/perl
# PODNAME: vote-count
# command line interface to run PrefVote::STV processing YAML input for testing and simple usage example
# derived from Vote::STV by Ian Kluft
# Copyright (c) 1998-2022 by Ian Kluft
# Open Source license: Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0

use Modern::Perl qw(2015); # require 5.20.0 or later
use autodie;
use Carp qw(croak confess);;
use YAML::XS; # RPM: perl-YAML-LibYAML, DEB: libyaml-libyaml-perl
use PrefVote::Core;
use Getopt::Long;
use Data::Dumper;

# print results list (winners or eliminated) with potential ties
sub print_result_list
{
    my $result_list = shift;
    if (scalar @$result_list) {
        foreach (my $i=0; $i < scalar @$result_list; $i++) {
            my $place = $i+1;
            if (scalar @{$result_list->[$i]} > 1) {
                say "$place  tie: ".join(" ", sort @{$result_list->[$i]});
            } else {
                say "$place: ".$result_list->[$i][0];
            }
        }
    } else {
        say "none";
    }
    return;
}

# get class suffix string
sub suffix
{
    my $class = shift;
    my $class_suffix = $class;
    $class_suffix =~ s/^.*:://x; # remove everything except the last part of the class name
    return $class_suffix;
}

# mainline function for exception-catching
sub main
{
    # command-line processing
    my ($debug, $test_mode, $out_format);
    GetOptions("debug" => \$debug, "test" => \$test_mode, "format|outformat:s" => \$out_format);
    if (not @ARGV) {
        say STDERR "usage: $0 [--debug] [--test] [--yaml|--rawyaml] yaml_file";
        exit 0;
    }

    # count votes
    my $vote_obj = PrefVote::Core::yaml2vote($ARGV[0]);
    if ($debug) {
        # set debugging in PrefVote hierarchy
        $vote_obj->debug(1);
    }
    $vote_obj->count();
    if ($vote_obj->debug()) {
        $Data::Dumper::Sortkeys = 1;
        $Data::Dumper::Indent = 1;
        say STDERR "returned vote object is a ".ref($vote_obj);
        say STDERR Dumper($vote_obj);
    }

    # check for test, YAML or default modes
    if ($test_mode) {
        # test mode - run black-box tests
        my $testspec = $vote_obj->testspec();
        $vote_obj->debug_print("testspec: ".Dumper($testspec // "undef"));

        # collect and run tests from a voting method (PrefVote:Core subclass)
        if (defined $testspec) {
            # 1st level in testspec is classes (by basename) to test against
            # use only tests for the current voting-method class
            require PrefVote::Core::TestUtil;
            $vote_obj->debug_print("checking tests: ".(ref $vote_obj));
            my @tests = $vote_obj->blackbox_check();
            PrefVote::Core::TestUtil::do_tests(@tests);
        }
    } elsif ($out_format eq "yaml") {
        # output YAML results
        print YAML::XS::Dump($vote_obj->result_yaml());
    } elsif ($out_format eq "rawyaml") {
        # output YAML results
        print YAML::XS::Dump($vote_obj);
    } else {
        # print result
        my $results = $vote_obj->results();
        say "Winning order";
        print_result_list($results->{winners});
        say "Elimination order";
        print_result_list($results->{eliminated});
    }
    return 1;
}

# mainline exception-catching wrapper
if (not eval { main() }) {
    my $e = $@;
    if (ref $e and $e->isa("PrefVote::Exception")) {
        say "exception: ".$e->{description};
        #say $e->stack_trace();
        say Dumper($e);
    } else {
        confess $e;
    }
    exit 1;
}

__END__

# POD documentation

=head1 NAME

vote-count

=head1 USAGE

vote-count vote-data.yaml

=head1 OPTIONS

=head1 EXIT STATUS

=head1 SEE ALSO

=head1 BUGS AND LIMITATIONS

Please report bugs via GitHub at L<https://github.com/ikluft/prefvote/issues>

Patches and enhancements may be submitted via a pull request at L<https://github.com/ikluft/prefvote/pulls>

=cut
